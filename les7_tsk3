"""
Задача3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
В классе должны быть реализованы методы перегрузки арифметических операторов:
сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
умножение и обычное (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться округление значения до целого числа.
Сложение.
Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
Вычитание.
Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
иначе выводить соответствующее сообщение.
Умножение.
Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
Деление.
Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.

В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.

Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
Тогда метод make_order() вернет строку: *****\n*****\n**.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
Тогда метод make_order() вернет строку: *****\n*****\n*****.
Подсказка: подробный список операторов для перегрузки доступен по ссылке.
Решение:
"""
class Cell:  # создать класс Клетка
    def __init__(self, number):  # в конструкторе инициализировать параметр, соответствующий количеству клеток (целое число)
        self.number = int(number)
#методы перегрузки арифметических операторов
    def __add__(self, other):  # сложение (__add__())
        result = self.number + other.number  # число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток
        return result

    def __sub__(self, other):  # вычитание (__sub__())
        if (self.number - other.number) > 0:  # Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля
            result = self.number - other.number
            return result
        else:
            print ('вычитание невозможно')  # иначе выводить соответствующее сообщение
            return False

    def __mul__(self, other):  # умножение (__mul__())
        result = self.number * other.number  # Число ячеек общей клетки - произведение количества ячеек этих двух клеток
        return result

    def __truediv__(self, other):  # деление (__truediv__())
        result = self.number // other.number  # Число ячеек общей клетки - целочисленное деление количества ячеек этих двух клеток
        return result

    def make_order(self, row):  # метод make_order(), принимающий экземпляр класса и количество ячеек в ряду
        self.row = row
        result = self.number
        print(f'Cell {result}')
        while result // self.row > 0:
            print (f'{"x" * self.row}')
            result = result - self.row
        print (f'{"x" * (result % self.row)}')
        return self.number

my_cell1 = Cell(12)
print(my_cell1.make_order(5))
my_cell2 = Cell(25)
print(my_cell2.make_order(5))

print(Cell(my_cell1 - my_cell2).make_order(5))
print(Cell(my_cell2 - my_cell1).make_order(5))

print(Cell(my_cell1 + my_cell2).make_order(5))

print(Cell(my_cell1 * my_cell2).make_order(5))
print(Cell(my_cell2 / my_cell1).make_order(5))
